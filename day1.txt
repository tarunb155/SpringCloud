day1
--> software setup
--> java  (jdk1.8)
--> eclipse
--> mysql
--> postman
--> vm
--> command prompt --> java -version (jdk1.8)
--> eclipse

programming paradigm
--> procedure oriented programming --> procedure/method/function  c
--> object oriented programming --> object, c++, java, .net, python, javascript
--> functional programming --> function, java 8, functional interface, lambda expression
--> reactive programmig --> it is about reacting to events, javascript, java


sychronous  --> will execute program line by line 
line 1	--> completed
line 2	--> completed
line 3	--> 5 minutes, wait for 5 minutes, then only it will switch to next line (blocking)
line 4	--> completed
line 5	--> completed


asynchronous (non-blocking)
line 1	--> completed
line 2	--> completed
line 3	--> 5 minutes, will submit this task in background, in mean time will switch to next line
line 4	--> completed
line 5	--> completed
line 6	--> completed
line 7	--> completed
now output of line 3 is ready, process output of line 3 by main thread
line 8	--> completed
line 9	--> completed
line 10	--> completed


--> event driven programming
--> background thread will notify main thread using different events (processing, next, complete)
--> event listener in this case would be main thread


--> multithreading
--> runnable, thread
--> executor services
--> forkandjoin
--> in multithreading programming we will be getting output in future
--> future interface is given to collect output of multithreading programming
--> future is useful for doing asychronous programming
--> isDone()--> will check whether task is completed or not --> blocking,  get()--> get output in future
--> we cannot chain output of future object

--> completablefuture (java 8)
--> it will rich api for dealing with asychronous programming
--> we can chain output of completablefuture very easily
--> it is possible to combine multiple completeable future
--> we can produce only one output
--> we are not able to control how many records we should get --> backpressure

reactive programming 
--> asychronous
--> event driven
--> it will produce many output(push N message)
--> responsive
--> backpressure

reactive programming in java
--> project reactor 	--> training
--> Rxjava
--> Jdk9 flow reactive stream

component of project reactor
--> publisher --> it will publish unlimited inforomation in the form of events
--> subscriber	--> it will subscribe to events which are published by publisher
--> subscription	--> it is one to one relation between publisher and subscriber
--> processor	--> data published by event will be processed by processor

publisher --> netflix, youtube channel, amazon prime, e-magazine, e-newsletter
subscriber --> user (you, me, anyone)
subscriptiion --> subscription number
processor --> download, view, trailer, rating, etc


publisher --> NSE, BSE
subscriber --> you, stock broker (zerodha, upstox, 5paisa)
subscription --> relation between zerodha and nse+bse
processor --> zerodha will show stock information on mobile app or web app

database record(10)
subscriber 	--> 	subscribe()	--> publisher
subscriber	<--	subscription	<-- publisher
subscriber 	--> request(3)		--> publisher
		<-- onNext(10)
		<-- onNext(15)
		<-- onNext(107)
		--> request (2)
		<-- onNext(23)
		<-- onNext(7654)
		--> onRequest(5)
		<-- onNext(34)
		<-- onNext(54)
		<-- onNext(53)
		<-- onNext(52)
		<-- onNext(76)

		<-- onComplete()

i subscribed to netflix 
subscriber 			--> publisher
		<-- onNext("xyz")
		<-- onNext("abc")
		<-- onNext(107)
		<-- onNext(23)
		<-- onNext(7654)
		<-- onNext(34)
		<-- onNext(54)
		<-- onNext(53)
		<-- onNext(52)
		<-- onNext(76)

		<-- onError


publishers in java 
--> mono	--> when you want to publish single  value	
--> flux	--> when you want to publish multiple value then use flux










